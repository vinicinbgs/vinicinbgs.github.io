"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[418],{930:n=>{n.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"/understand-shell-script","metadata":{"permalink":"/en/blog/understand-shell-script","editUrl":"https://github.com/vinicinbgs/vinicinbgs.github.io/blob/main/blog/understand-shell-script/index.mdx","source":"@site/blog/understand-shell-script/index.mdx","title":"Understand Shell Script","description":"Ill show to you how works a shell script and we go create one example","date":"2022-02-21T00:00:00.000Z","tags":[{"inline":true,"label":"technology","permalink":"/en/blog/tags/technology"},{"inline":true,"label":"shell script","permalink":"/en/blog/tags/shell-script"},{"inline":true,"label":"automation","permalink":"/en/blog/tags/automation"}],"readingTime":6.47,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Understand Shell Script","date":"2022-02-21T00:00:00.000Z","slug":"/understand-shell-script","description":"Ill show to you how works a shell script and we go create one example","tags":["technology","shell script","automation"]},"unlisted":false},"content":"#### Summary:\\n[Repository on GitHub](https://github.com/vinicinbgs/blog-projects/tree/main/shell-script)\\n- 1. [Introduction](#intro)\\n  - 1.1 [Create Example](#create-example)\\n  - 1.2 [Write Example](#write-example)\\n  - 1.3 [Run Example](#run-example)\\n  - 1.4 [Touch Example](#create-new-file-example)\\n- 2. [Loops](#loops)\\n  - 2.1 [For](#loops-for)\\n  - 2.2 [While](#loops-while)\\n- 3. [Comparison](#comparison)\\n  - 3.1 [String Comparison](#string-comparison)\\n  - 3.2 [Numbers Comparison](#numbers-comparison)\\n- 4. [Final Example](#final-example)\\n- 5. [Sources](#sources)\\n\\n---\\n## Goal:\\n---\\nMy intention is to give to you an idea of how you can create your own shell script commands \\nto automate some tasks and show to you some references (https://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html) (https://www.shellscript.sh).\\n\\nShell script has Variables, Repetition Structures, Conditional Statements and commands UNIX so you can create\\nscripts to use as entrypoint.sh on docker container or just to automate one boring manual task in your S.O.\\n\\ne.g: This blog is deployed with this [Shell Script](https://github.com/vinicinbgs/vinicinbgs.github.io/blob/main/deploy.sh) that generate a build, commit, push to gh-pages branch in my repo.\\n\\nYou can use CLI commands from others softwares installed in your machine, like GIT, Docker, node, npm...\\n\\nIf you understand the power of shell script your imagination will be the limit.\\n\\nWithout further ado...\\n\\n## <a name=\\"intro\\"></a> 1. Introduction\\n---\\nWhat is Shell Script?\\n\\n- A shell script is a text file that contains a sequence of commands for a UNIX-based \\noperating system. It is called a shell script because it combines a sequence of commands, \\nthat would otherwise have to be typed into the keyboard one at a time, into a single script.\\n\\nA Unix shell is both a command interface and a programming language\\n\\n<p class=\\"hightlight bg-danger\\">\\n  In our case the computer program is <ins>example.sh</ins> file\\n</p>\\n<br />\\n<h4>\\n  <a name=\\"create-example\\"></a>  1.1 Create a file called <ins>example.sh</ins> using terminal, follow:\\n</h4>\\n\\n```bash\\ntouch example.sh\\nchmod +x example.sh\\n```\\n\\n- **touch**: will create the file\\n- **chmod +x**: will give permission to execute file script\\n\\n<p class=\\"hightlight\\">\\n  You can use <strong>touch</strong> and <strong>chmod</strong> commands inside your shell script file too\\n</p>\\n\\n<br />\\n<h4>\\n  <a name=\\"write-example\\"></a> 1.2 Open file <ins>example.sh</ins> in your preferred IDE\\n</h4>\\n\\n```bash\\n#!/bin/sh\\n\\necho \\"Start\\" # this command will output in terminal Start string\\n```\\n\\n- `#!/bin/sh` tells Unix that the file is to be executed by /bin/sh.\\n\\n<br />\\n<h4>\\n  <a name=\\"run-example\\"></a> 1.3 Running file <ins>example.sh</ins> in terminal\\n</h4>\\n\\n```sh\\nsh example.sh\\n```\\n\\n<br />\\n<h4>\\n  <a name=\\"create-new-file-example\\"></a> 1.4 Create a new file using shell script\\n</h4>\\n\\n```bash\\n#!/bin/sh\\necho \\"Start\\"\\ntouch new_file.txt # create new file called new_file.txt\\necho \\"First Line\\">> new_file.txt # append in new_file.txt the text First Line\\n```\\n\\n<br />\\n\\n## <a name=\\"variables\\"></a> 2. Variables\\n---\\nA variable is a character string to which we assign a value. \\nThe value assigned could be a number, text, filename, device, or any other type of data.\\n\\n### 2.1 <a name=\\"variables-declare\\"></a> Declare Variable\\n\\n```bash\\n#!/bin/sh\\n\\nVARIABLE_MY_NAME=\\"Vinicius\\"\\nVARIABLE_TEXT=\\"Hi, my name is \\"\\necho \\"$VARIABLE_TEXT $VARIABLE_MY_NAME\\"\\n```\\n\\nTerminal Output: \\n```sh\\nHi, my name is Vinicius\\n```\\n\\n### 2.2 <a name=\\"variables-user-input\\"></a> Read Input Variable\\n```bash\\n#!/bin/sh\\n\\necho \\"What is your name?\\"\\nread VARIABLE_MY_NAME\\n\\nVARIABLE_TEXT=\\"Hi,\\"\\n\\necho \\"$VARIABLE_TEXT $VARIABLE_MY_NAME\\"\\n```\\n\\nTerminal Output: \\n```sh\\nWhat is your name?\\n> Vinicius\\n\\nHi, Vinicius\\n```\\n\\n<br />\\n\\n## <a name=\\"loops\\"></a> 3. Loops\\n---\\nLoops will enable you to execute one or more commands repeatedly\\n\\n### <a name=\\"loops-for\\"></a> 3.1 For\\n\\n```bash\\n#!/bin/sh\\nfor i in 1 2 3 4 5\\ndo\\n  echo \\"Looping ... number $i\\"\\ndone\\n```\\n\\n### <a name=\\"loops-while\\"></a> 3.2 While\\n\\n```bash\\n#!/bin/sh\\nwhile :\\ndo\\n  echo \\"Please type something in (^C to quit)\\"\\n  read INPUT_STRING\\n  echo \\"You typed: $INPUT_STRING\\"\\ndone\\n```\\n\\n<br />\\n\\n### <a name=\\"comparison\\"></a> 4. Comparison\\n---\\nSometimes you need to check if one variable is equal or not to another or greater/less... <br />\\nIn this section you can check ways to compare numbers and strings variables.\\n#### <a name=\\"numbers-comparison\\"></a> 4.1 Numbers Comparison\\n```bash\\n# is equal to:\\nif [ \\"$a\\" -eq \\"$b\\" ]\\n\\n# is not equal to:\\nif [ \\"$a\\" -ne \\"$b\\" ]\\n\\n# is greater than:\\nif [ \\"$a\\" -gt \\"$b\\" ]\\n\\n# is greater than or equal to:\\nif [ \\"$a\\" -ge \\"$b\\" ]\\n\\n# is less than: -lt\\nif [ \\"$a\\" -lt \\"$b\\" ]\\n\\n# is less than or equal to:\\nif [ \\"$a\\" -le \\"$b\\" ]\\n\\n# is less than (within double parentheses):\\n((\\"$a\\" < \\"$b\\"))\\n\\n# is less than or equal to (within double parentheses):\\n((\\"$a\\" <= \\"$b\\"))\\n\\n# is greater than (within double parentheses):\\n((\\"$a\\" > \\"$b\\"))\\n\\n# is greater than or equal to (within double parentheses):\\n((\\"$a\\" >= \\"$b\\"))\\n```\\n\\n<br />\\n\\n#### <a name=\\"string-comparison\\"></a> 4.2 String Comparison\\n```bash\\n# is equal to: \\nif [ \\"$a\\" = \\"$b\\" ]\\n\\n# is equal to:\\nif [ \\"$a\\" == \\"$b\\" ]\\n\\n# is not equal to:\\nif [ \\"$a\\" != \\"$b\\" ]\\n\\n# is less than, in ASCII alphabetical order:\\nif [[ \\"$a\\" < \\"$b\\" ]]\\n\\n# is greater than, in ASCII alphabetical order:\\nif [[ \\"$a\\" > \\"$b\\" ]]\\n\\n# string is null, that is, has zero length:\\nif [ -z \\"$String\\" ]\\nthen\\n  echo \\"\\\\$String is null.\\"\\nelse\\n  echo \\"\\\\$String is NOT null.\\"\\nfi\\n\\n# string is not null:\\nif [ -n \\"$String\\" ]\\nthen\\n  echo \\"\\\\$String is not null.\\"\\nelse\\n  echo \\"\\\\$String is null.\\"\\nfi\\n```\\n\\n<br />\\n\\n### <a name=\\"final-example\\"></a> 5. Final example.sh\\n---\\nCopy the script below and run it on your machine and after use, edit to your needs\\n\\n[Repository on GitHub](https://github.com/vinicinbgs/article-example-understand-shell-script/blob/main/example.sh)\\n```bash\\n#!bin/sh\\n\\nscript() {\\n    echo \\"Start\\" # Output Start in terminal\\n\\n    # Receive variable by user input\\n    echo \\"Put your name\\"      # Output Put your name in terminal\\n    read name                 # Wait/Receive input variable name by user\\n    echo Your name is ${name} # Output Your name is variable name\\n\\n    # Execute commands of another programs (like docker, git...)\\n    docker -v # docker version\\n    git --version # git version\\n\\n\\n    rm Dockerfile # Remove old Dockerfile\\n    touch Dockerfile # Create Dockerfile\\n    echo \\"FROM alpine:3.14\\" >>Dockerfile # Input echo string inside file\\n    echo \'ENTRYPOINT [\\"echo\\", \\"Container running \ud83d\udc4d ( \u0361\xb0 \u035c\u0296 \u0361\xb0)\\"]\' >>Dockerfile # Input echo string inside file\\n    echo \'CMD [\\"\'${name}\'\\"] && /dev/null\' >>Dockerfile # Input echo string inside file\\n\\n    # Build and Execute Docker Container\\n    imageName=\\"${name}-docker-image\\" # docker image name variable\\n    docker build -t ${imageName} .   # build image\\n    docker images                    # list images\\n\\n    # Generate utils variables\\n    timestamp=$(date +%s)                                 # create variable timestamp to attach in container name\\n    containerName=\\"${name}-docker-container-${timestamp}\\" # variable container name to assign in run command\\n\\n    # Running command and see logs\\n    echo \\"-------\\"\\n    echo \\"Start: \\" && docker run -d --name ${containerName} ${imageName} # running container\\n    echo \\"-------\\"\\n    echo \\"Logs: \\" && docker logs ${containerName} # output logs container\\n    echo \\"-------\\"\\n    # Remove all Containers\\n    containers=$(docker ps -a --format \\"{{.Names}}\\" | grep \\"${name}-docker-container\\") # list all containers created in this script\\n    docker rm -f ${containers}                                                         # remove all containers created in this script\\n    docker ps -a                                                                       # list all containers\\n\\n    # Remove all Images\\n    imgs=$(docker images --format \\"{{.Repository}}\\" | grep \\"${imageName}\\") # imgs created repository\\n    docker rmi -f ${imgs} # Remove images in imgs variable\\n}\\n\\nscript | tee ex.log # fill log file called ex.log\\n```\\n\\nSteps:\\n\\n1. output \\"start\\" in terminal\\n2. output \\"Put your name\\" in terminal\\n3. wait user input variable name\\n4. output \\"Your name is ...\\" in terminal\\n5. check docker version\\n6. check git version\\n7. remove old Dockerfile\\n8. create new Dockerfile empty\\n9. write in file Dockerfile echo string to create a valid docker image\\n10. build image\\n11. run container\\n12. output logs container\\n13. remove all containers created (normally only one)\\n14. remove all images created (normally only one)\\n---\\n<p class=\\"hightlight\\" style={{ backgroundColor: \'yellow\', color: \'black\' }}>\\n  Use SOURCES to study and deepen your knowledge\\n</p>\\n\\n<a name=\\"sources\\"></a> \\n\\nSources: <br />\\n- https://www.gnu.org/software/bash/manual/html_node/index.html (shell)\\n- https://www.shellscript.sh (shell)\\n- https://tldp.org/LDP/abs/html/comparison-ops.html (shell)\\n- https://www.tutorialspoint.com/unix/ (shell)\\n- https://www.oreilly.com/openbook/debian/book/ch13_03.html (shell)\\n- https://en.wikipedia.org/wiki/Tee_(command) (shell)\\n- https://www.techtarget.com/searchdatacenter/definition/shell-script (shell)\\n- https://docs.docker.com/develop/develop-images/dockerfile_best-practices/ (docker)\\n---\\n- https://github.com/vinicinbgs/blog-projects/tree/main/shell-script"}]}}')}}]);